Index: eos_run.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import time\nfrom pathlib import Path\nimport glob\nimport os\nimport shutil\n\nfrom dflow import Step, Workflow, download_artifact, upload_artifact\nfrom dflow.python import (OP, OPIO, Artifact, OPIOSign, PythonOPTemplate,\n                          upload_packages)\nfrom dflow.plugins.dispatcher import DispatcherExecutor\n\nlbg_resource_dict = {\n    \"number_node\": 1,\n    \"cpu_per_node\": 8,\n    \"gpu_per_node\": 1,\n    \"queue_name\": \"eosflow_run\",\n    \"group_size\": 1,\n    \"source_list\": [\"/opt/deepmd-kit-2.0.1\"]\n    #\"source_list\": [\"/opt/intel/oneapi/setvars.sh\"]\n}\nlbg_machine_dict = {\n    \"batch_type\": \"Lebesgue\",\n    \"context_type\": \"LebesgueContext\",\n    \"local_root\" : \"./\",\n    \"remote_profile\":{\n        \"email\": \"xxxxxxxx@xxxx\",\n        \"password\": \"xxxxxx!\",\n        \"program_id\": xxxx,\n        \"input_data\":{\n            \"api_version\":2,\n            \"job_type\": \"indicate\",\n            \"log_file\": \"log\",\n            \"grouped\":True,\n            \"job_name\": \"eosflow_run\",\n            \"disk_size\": 100,\n            \"scass_type\":\"c12_m92_1 * NVIDIA V100\",\n            \"platform\": \"ali\",\n            #\"image_name\":\"zhuoyli/dflow_test:eos\",\n            \"image_name\":\"LBG_DeePMD-kit_2.0.1_v1.1\",\n            \"on_demand\":0\n    }\n}\n}\n\nif \"__file__\" in locals():\n    upload_packages.append(__file__)\n\n\nclass RunProperty(OP):\n    def __init__(self):\n        pass\n\n    @classmethod\n    def get_input_sign(cls):\n        return OPIOSign({\n            'target_tasks': Artifact(Path)\n        })\n\n    @classmethod\n    def get_output_sign(cls):\n        return OPIOSign({\n            'out_tasks': Artifact(Path)\n        })\n\n    def run(self, path_to_work):\n        tmp_task_list = glob.glob(os.path.join(path_to_work, 'task.[0-9]*[0-9]'))\n        tmp_task_list.sort()\n        all_task = tmp_task_list\n        #run_tasks = util.collect_task(all_task, inter_type)\n        if len(all_task) == 0:\n            return\n        else:\n            for task in all_task:\n                os.chdir(task)\n                os.system(\"lmp -i in.lammps -v restart 0\")\n\n    @OP.exec_sign_check\n    def execute(\n            self,\n            op_in: OPIO,\n    ) -> OPIO:\n        op_out = OPIO({\n            \"out_tasks\": Path('eos_calc_out')\n        })\n        path_to_work = op_in['target_tasks']\n        cwd = os.getcwd()\n        self.run(path_to_work)\n        os.chdir(cwd)\n        shutil.copytree(path_to_work, op_out[\"out_tasks\"])\n        return op_out\n\ndef main():\n    from eos_make_post import (EosMake, EosPost)\n    # define input artifacts\n    artifact0 = upload_artifact(\"param.json\")\n    artifact1 = upload_artifact(\"POSCAR\")\n    artifact2 = upload_artifact(\"frozen_model.pb\")\n    print(artifact0)\n    print(artifact1)\n    print(artifact2)\n\n    #define dispatcher\n    dispatcher_executor = DispatcherExecutor(\n        host=\"YOUR_HOST\", port=\"YOUR_PORT\",\n        machine_dict=lbg_machine_dict,\n        resources_dict=lbg_resource_dict)\n\n    # define Steps for make, run and post\n    step_make = Step(\n        name=\"make-eos\",\n        template=PythonOPTemplate(EosMake, image=\"zhuoyli/dflow_test:eos\"),\n        artifacts={\"parameters\": artifact0,\n                   \"structure\": artifact1,\n                   \"potential\": artifact2},\n    )\n    artifact_target_tasks = step_make.outputs.artifacts[\"tasks\"]\n\n    step_run = Step(\n        name=\"run-eos\",\n        template=PythonOPTemplate(RunProperty,\n                                  image=\"zhuoyli/dflow_test:eos\",\n                                  command=['python3']),\n        artifacts={\"target_tasks\": artifact_target_tasks}, executor=dispatcher_executor,\n        util_command=['python3']\n    )\n    artifact_out_tasks = step_run.outputs.artifacts[\"out_tasks\"]\n\n    step_post = Step(\n        name=\"post-eos\",\n        template=PythonOPTemplate(EosPost, image=\"zhuoyli/dflow_test:eos\"),\n        artifacts={\"result_tasks\": artifact_out_tasks}\n    )\n\n    # define Workflow for eos\n    wf = Workflow(name=\"eos\")\n    wf.add(step_make)\n    wf.add(step_run)\n    wf.add(step_post)\n    wf.submit()\n\n    while wf.query_status() in [\"Pending\", \"Running\"]:\n        time.sleep(1)\n\n    assert (wf.query_status() == \"Succeeded\")\n    step_post = wf.query_step(name=\"step_post\")[0]\n    assert (step_post.phase == \"Succeeded\")\n\n    print(download_artifact(step_post.outputs.artifacts[\"result_json\"]))\n    print(download_artifact(step_post.outputs.artifacts[\"result_out\"]))\n\nif __name__ == \"__main__\":\n    main()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/eos_run.py b/eos_run.py
--- a/eos_run.py	(revision a5f349a5d1aeafa5023a06a05b0f20d53a3c6c04)
+++ b/eos_run.py	(date 1661606060261)
@@ -23,9 +23,9 @@
     "context_type": "LebesgueContext",
     "local_root" : "./",
     "remote_profile":{
-        "email": "xxxxxxxx@xxxx",
-        "password": "xxxxxx!",
-        "program_id": xxxx,
+        "email": "zhuoyli@connect.hku.hk",
+        "password": "enoughBor715!",
+        "program_id": 2315,
         "input_data":{
             "api_version":2,
             "job_type": "indicate",
@@ -101,7 +101,7 @@
 
     #define dispatcher
     dispatcher_executor = DispatcherExecutor(
-        host="YOUR_HOST", port="YOUR_PORT",
+        host="127.0.0.1", port="2746",
         machine_dict=lbg_machine_dict,
         resources_dict=lbg_resource_dict)
 
@@ -142,11 +142,11 @@
         time.sleep(1)
 
     assert (wf.query_status() == "Succeeded")
-    step_post = wf.query_step(name="step_post")[0]
-    assert (step_post.phase == "Succeeded")
+    step = wf.query_step(name="post-eos")[0]
+    assert (step.phase == "Succeeded")
 
-    print(download_artifact(step_post.outputs.artifacts["result_json"]))
-    print(download_artifact(step_post.outputs.artifacts["result_out"]))
+    download_artifact(step.outputs.artifacts["result_json"])
+    download_artifact(step.outputs.artifacts["result_out"])
 
 if __name__ == "__main__":
     main()
